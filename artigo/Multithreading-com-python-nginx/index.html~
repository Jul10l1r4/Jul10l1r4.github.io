<!DOCTYPE html>
<html lang="pt-BR">
	<head>
      <meta charset="utf-8"/>
      <title>Leve e veloz ‚Äì Multithreading com Python em Nginx | Julio Lira</title>	
      <!--link rel="icon" type="image/png" href="img/favicon.png" /-->
      <meta name="viewport" content="width=device-width, user-scalable=no"/>
      <link rel="stylesheet" href="https://jul10l1r4.github.io/Texto-farmatacao/principal.css"/>
      <link rel="stylesheet" href="../../css/layout.css"/>
      <meta name="author" content="Julio Lira"/>
			<link rel="icon" href="../../assets/jl.png" />
      <meta name="robots" content="index, follow">
      <meta property="og:site_name" content="https://jul10l1r4.github.io/" />
      <meta property="og:url" content="https://jul10l1r4.github.io/artigos/Shell-script-e-performance-psicopata-üî™--stdout/index.html" />
      <meta name="description" content="√â muito comum prepararmos uma infraestrutura fuderoza das gal√°xias e colocar uma aplica√ß√£o que n√£o tem o mesmo desempenho, e no final a gente ver algo cheio de gargalos..."/>
      <meta property="og:title" content="Leve e veloz ‚Äì Multithreading com Python em Nginx | Julio Lira">
      <meta property="og:image" content="parada1.png"/>
      <meta property="og:description" content="√â muito comum prepararmos uma infraestrutura fuderoza das gal√°xias e colocar uma aplica√ß√£o que n√£o tem o mesmo desempenho, e no final a gente ver algo cheio de gargalos."/>
      <meta property="og:author" content="Julio Lira"/>
  <!-- twitter metatags-->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="Leve e veloz ‚Äì Multithreading com Python em Nginx | Julio Lira">
  <meta name="twitter:description" content="√â muito comum prepararmos uma infraestrutura fuderoza das gal√°xias e colocar uma aplica√ß√£o que n√£o tem o mesmo desempenho, e no final a gente ver algo cheio de gargalos.">
  <meta name="twitter:image" content="parada1.png">
			<script src="../../Ecmascript/analiz.js"></script>
			<script async src="../../Ecmascript/scroll.js"></script>
<!-- Facilitar indexa√ß√£o de ferramentas de busca --->
	<script type="application/ld+json">
{
	"name":"Leve e veloz ‚Äì Multithreading com Python em Nginx | Julio Lira",
	"description":"√â muito comum prepararmos uma infraestrutura fuderoza das gal√°xias e colocar uma aplica√ß√£o que n√£o tem o mesmo desempenho, e no final a gente ver algo cheio de gargalos.",
	"author":"Julio Lira",
	"@type":"Organization",
	"url":"https://jul10l1r4.github.io/artigos/Shell-script-e-performance-psicopata-üî™--stdout/index.html",
	"image":"https://instagram.fnat2-1.fna.fbcdn.net/vp/c86b9975b58d82a3e5ea3526131a8d2a/5B146E0F/t51.2885-15/e35/26868816_181404315800705_76975572110016512_n.jpg",
	"headline":"Julio Lira",
  "@context":"http://schema.org",
  "contactPoint": {
					"@type": "ContactPoint",
					"email": "jul10l1r4@ufrn.edu.br"
				}
}
		 </script>
			
    </head>
    <body>
			<header style="background-image: url(../../assets/bg-ops.png)" id="top">
				<div id="to">
					<h1>Leve e veloz ‚Äì Multithreading com Python em Nginx
						<!--img src="https://emojipedia-us.s3.amazonaws.com/thumbs/160/facebook/111/smirking-face_1f60f.png"/-->
					</h1>
				</div>
			</header>
			<a id="down" href="#conteudo">Veja como obter o m√°ximo que pode do Python com Nginx</a>
			<section class="medium-text">
				<p id="conteudo">
					√â obvio que a vontade de todo administrador, desenvolvedor, devops ou o que seja √© que haja uma alta disponibilidade no resultado final de qualquer projeto.
				</p>
				<p>
					Ent√£o pensando nisso e realizando v√°rios testes notei que o servidor Nginx possuia menos consumo de mem√≥ria e um robusto suporte para processar v√°rias requisi√ß√µes sem com que houvesse um escandaloso consumo.
				</p>
				<figure>
					<img src="nginx.png" alt="Logo do Nginx"/>
					<figcaption>Veloz, leve lindo e cheroso</figcaption>
				</figure>
				<p>
					O Nginx foi um dos primeiros servidores a implantar nativamente a estrutura antibloqueante, isso se refere disponibilidade de resposta HTTP.
				</p>
				<p>
					Vemos na imagem abaixo ao lado esquerdo a estrutura tradicional de resposta do servi√ßo, e ao lado direito a estrutura usada pelo Nginx, isso tudo se dar a um amplo estudo relacionado a disponibilidade e de multi threads, fazendo com que o Processo execute de forma que possa aproveitar o m√°ximo do processamento. <a href="https://www.nginx.com/blog/thread-pools-boost-performance-9x/" target="_blank">Esse artigo</a> do pr√≥prio blog do nginx, explica detalhadamente a estrutura adotada.
				</p>
				
				<figure>
					<img src="worknginx.png" alt="Anti Block I/O"/>
					<figcaption>Anti bloqueante</figcaption>
				</figure>
				<blockquote>
					 L√™-se essa imagem acima da esquerda para a direita, sendo assim o per√≠odo de envio de resposta do servidor ao cliente.
				</blockquote>
				<p>
					√â muito comum a infraestrutura e desenvolvimento andarem longes um do outro, muitas vezes o respons√°vel por manter o servidor usa tecnologias mais recentes e perform√°ticas para uma aplica√ß√£o em que contraria totalmente todo o seu estudo/esforco, pois √©... Todo o trabalho √© v√£o se n√£o houver um c√≥digo na aplica√ß√£o que seja projetado de forma inteligente.
				</p>
				<p>
					Vamos as defini√ß√µes dos termos que tanto em nosso servidor Nginx quanto em nossa aplica√ß√£o usaremos.
				</p>
				<h3>Multithreading</h3>
				<p>
					Nada mais √© do que oferecer a possibilidade de executar paralelamente v√°rias linhas de execu√ß√£o podendo ser processos ou rotinas.
				</p>
				<p>
					Compartilham o mesmo ou v√°rias unidades de processamentos, e caches de mem√≥ria e asssim √© poss√≠vel a fazer uma veloz aplica√ß√£o, dependendo do cen√°rio desenvolvido.
				</p>
				<h3>Queue (fila)</h3>
				<p>
					Nos d√° a possibilidade de definirmos os processos que devem est√° a frente e os processos que devem executar ap√≥s uma determinada a√ß√£o... Por exemplo: Em determinado c√≥digo precisamos apresentar na API o status de nosso servidor, e mostrar algumas coisas est√°ticas, e fazer a conex√£o com o banco de dados e verificar se aquele usu√°rio tem permiss√£o para receber detalhes mais espec√≠ficos de outras coisas do banco.
				</p>
				<p>
					Com um callback ser√° poss√≠vel mandar primeiramente o texto est√°tico e ap√≥s isso realizar a conex√£o com o banco, pois dependendo de onde fica o banco isso pode ser um gargalo, e ent√£o o frontend receber√° a resposta enquanto  o backend ainda processa a informa√ß√£o.
				</p>
				<h1>Show-me the f*ck code</h1>
				<p>
					Ent√£o vamos aos testes, reproduzi dois c√≥digos que sejam pos√≠vel ser testado em sua m√°quina local sem com que precise de
					banco de dados, segue o c√≥digo
				</p>
				
				<figure>
					<script src="https://gist.github.com/Jul10l1r4/1fd4ad230f82ce4c28a493ee5c72dbb9.js"></script>
					<figcaption>C√≥digo simpes que gera v√°rias requisi√ß√µes</figcaption>
				</figure>
				<p>
					E tamb√©m utilizei o mesmo c√≥digo para outro teste, e isso mostrar√° de forma pr√°tica o uso de v√°rias linhas. Isso √©
					as v√°rias threads definidas fazem com que ele realize paralelamente as v√°rias requisi√ß√µes.
				</p>
				<figure>
					<script src="https://gist.github.com/Jul10l1r4/27b2b4c8ab4005e480514419bc949f5e.js"></script>
					<figcaption>C√≥digo simpes que geram v√°rias requisi√ß√µes usando v√°rias threads</figcaption>
				</figure>
				<p>
					Para baixar, usei o wget nesses dois links com os dois script, esse c√≥digo:
				</p>
				<figure>
				      <script src="https://gist.github.com/Jul10l1r4/792021929ca01b9f132dcd4de65fce33.js"></script>
				      <figcaption>Ap√≥s o download executei os scripts para comparar</figcaption>
				</figure>
				<p>
				  Usando o <code>time</code> (buit-in) podemos ter uma leve compreens√£o da diferen√ßa alarmante de ambos os scripts
				</p>
				<figure>
				      <img src="print.png" alt="Captura de tela do tempo de execu√ß√£o do script com v√°rias threads bem mais veloz">
				      <figcaption>Veja a diferen√ßa significante entre um e outro</figcaption>
				</figure>
				<h1>It's magic!</h1>
				<p>
				      Realmente, vemos uma diferen√ßa alarmante de cada ramo, mas ser√° que isso √© algo que pode ser usado em nossa realidade atual?
				      Ser√° que isso √© aplicavel a desenvolvimento web? Ent√£o, preparei uma API em python apenas para testar essa quest√£o de processamento,
				      ela funcionar√° da seguinte forma: O usu√°rio far√° a requisi√ß√£o de receber 3 imagens em base64, nossa API processar√° tudo e disparar√°
				      v√°rias requisi√ßoes ao banco de forma paralela, o banco dever√° ter a capacidade suficiente de saber processar tais requisi√ß√µes e prover.
				</p>
				<blockquote>
				      Lembre-se isso pode parecer algo saud√°vel ao servidor que processa no backend por√©m processar com diferentes threads de processamento
				      requer que o servidor esteja dedicado para processar aquele tipo de informa√ß√£o, e <strong>nem tudo √© m√°gica</strong> √© necess√°rio que
				      considere as condi√ß√µes em que est√° o SO do servidor, ou considerar os seus desempenhos em clusters ou qual seja o cen√°rio, talvez necessite
				      de manuten√ß√£o para que processe tais informa√ß√µes.
				</blockquote>
				<p>
					E ent√£o ap√≥s ser escrito, seguem os c√≥digo... Por ser um exemplo pequeno a diferen√ßa entre ambos ir√° varias bas de acordo com a sua banda de rede.
				</p>
				<figure>
					<figcaption>Exemplo de conex√£o sem multithreads</figcaption>
				</figure>
				<p>
					Esse √© um c√≥digo comum que ir√° fazer uma consulta diretamente no banco e retornar seu valor de forma normal
				</p>
				<figure>
					<script src="https://gist.github.com/Jul10l1r4/b688210bf0c0cbe13c62901b5dc0f7a9.js"></script>
					</figcaption>C√≥digo trabalhando com 2 threads, correpondente aos dois loops da requisi√ß√£o</figcaption>
				</figure>
				<p>
					A forma em que fiz usando o <code>find_one</code> sabemos que retorna apenas aquele objeto que caia naquela instru√ß√£o l√≥gica
				</p>
				<figure>
					<script src="https://gist.github.com/Jul10l1r4/2dbdf1d7ff70a96fb823f61aa3034592.js"></script>
					<figcaption>
						Ent√£o tamb√©m escrevi, ambos podem ser testados com diferentes dados
					</figcaption>
				</figure>
			</section>
			<footer class="separador-top top6">
       <br/>
				<a href="https://jul10l1r4.github.io/artigo/Shell-script-e-performance-psicopata-%F0%9F%94%AA--stdout/index.html">
					‚Üê Shellscript e performance psicopata - STDOUT
				</a>
        |
				<a href="http://jul10l1r4.github.io/HTTP_-_Resposta/">
					Mantenha a seguran√ßa de sua p√°gina, HTTP Meme resposta ‚Üí
				</a>
			</footer>
    </body>
  </html>		
